package com.github.richardflee.astroimagej.query_objects;

import com.github.richardflee.astroimagej.utils.AstroCoords;

/**
 * Query result from on-line catalog database, instances of this class
 * encapsulate coordinate and magnitude data for a single Comparison or
 * Reference star.
 */
public class FieldObject extends AbstractFieldObject {
	
	private double mag = 0.0;
	private double magErr = 0.0;

	private Integer nObs = 1;
	private double radSepAmin = 0.0;

	private Boolean isSelected = true;

	/**
	 * Default parameters for Sirius, eg.g for unit test
	 */
	
	public FieldObject() {
		super( "sirius", 
				AstroCoords.raHms_To_raHr("06:45:08.917"),
				AstroCoords.decDms_To_decDeg("-16:42:58.02"));		
		this.mag = -1.46;
		this.magErr = 0.02;
	}
	
	
	public FieldObject(String objectId, double raHr, double decDeg, double mag, double magErr) {
		super(objectId, raHr, decDeg);

		this.mag = mag;
		this.magErr = magErr;
	}

	
	public void setRadSepAmin(FieldObject target) {
		double ra = Math.toRadians(raHr * 15.0);
		double ra0 = Math.toRadians(target.getRaHr() * 15.0);

		double dec = Math.toRadians(decDeg);
		double dec0 = Math.toRadians(target.getDecDeg());

		double cosA = Math.sin(dec) * Math.sin(dec0) + Math.cos(dec) * Math.cos(dec0) * Math.cos(ra - ra0);
		this.radSepAmin = Math.toDegrees(Math.acos(cosA)) * 60.0;
	}

	public double getRadSepAmin() {
		return radSepAmin;
	}

	// autogenerated getters, setters and toString methods

	public Boolean getIsSelected() {
		return isSelected;
	}

	public void setIsSelected(Boolean isSelected) {
		this.isSelected = isSelected;
	}

	public Integer getnObs() {
		return nObs;
	}

	public void setnObs(Integer nObs) {
		this.nObs = nObs;
	}

	public String getObjectId() {
		return objectId;
	}


	public double getRaHr() {
		return raHr;
	}

	public void setRaHr(double raHr) {
		this.raHr = raHr;
	}

	public double getDecDeg() {
		return decDeg;
	}

	public void setDecDeg(double decDeg) {
		this.decDeg = decDeg;
	}

	public double getMag() {
		return mag;
	}

	public void setMag(double mag) {
		this.mag = mag;
	}

	public double getMagErr() {
		return magErr;
	}

	public void setMagErr(double magErr) {
		this.magErr = magErr;
	}

	@Override
	public String toString() {
		return "FieldObject [objectId=" + objectId + ", raHr=" + raHr + ", decDeg=" + decDeg + ", mag=" + mag
				+ ", magErr=" + magErr + ", nObs=" + nObs + ", radSepAmin=" + radSepAmin + ", isSelected=" + isSelected
				+ "]";
	}

	// 6.50862013 +29.688453 1.0421 4 14.716 0.090
	public static void main(String[] args) {
		//CatalogQuery query = new CatalogQuery();

		FieldObject fo1 = new FieldObject("wasp12", 6.50862013, 29.688453, 12.345, 0.23);
		
		System.out.println(fo1.toString());
		
		FieldObject fo2 = new FieldObject(null, 6.50862013, 29.688453, 14.716, 0.09);
		String testId = "06303103+29411843";
		
		System.out.println(testId);
		System.out.println(fo2.getObjectId());
		System.out.println(testId.equals(fo2.getObjectId()));
	}

}
